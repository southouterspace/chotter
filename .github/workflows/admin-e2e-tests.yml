name: Admin Dashboard E2E Tests

on:
  push:
    branches:
      - main
      - phase-2-admin-dashboard
    paths:
      - 'apps/web-admin/**'
      - 'packages/database/**'
      - '.github/workflows/admin-e2e-tests.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'apps/web-admin/**'
      - 'packages/database/**'
      - '.github/workflows/admin-e2e-tests.yml'

jobs:
  test:
    name: Run E2E Tests
    timeout-minutes: 20
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: chotter_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Install Playwright Browsers
        run: cd apps/web-admin && bunx playwright install --with-deps chromium

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase local instance
        run: |
          cd supabase
          supabase start
        env:
          SUPABASE_DB_PASSWORD: postgres

      - name: Run database migrations
        run: |
          cd supabase
          supabase db push

      - name: Seed test data
        run: |
          cd supabase
          supabase db seed
        continue-on-error: true

      - name: Create test user
        run: |
          cd supabase
          # Create test admin user for E2E tests
          supabase db execute "
            INSERT INTO auth.users (
              id,
              email,
              encrypted_password,
              email_confirmed_at,
              created_at,
              updated_at,
              raw_app_meta_data,
              raw_user_meta_data,
              role
            ) VALUES (
              gen_random_uuid(),
              'admin@test.com',
              crypt('testpassword123', gen_salt('bf')),
              now(),
              now(),
              now(),
              '{\"provider\":\"email\",\"providers\":[\"email\"]}',
              '{}',
              'authenticated'
            ) ON CONFLICT (email) DO NOTHING;
          "
        continue-on-error: true

      - name: Build admin app
        run: cd apps/web-admin && bun run build

      - name: Run E2E tests
        run: cd apps/web-admin && bun run test:e2e
        env:
          CI: true
          VITE_SUPABASE_URL: http://127.0.0.1:54321
          VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0' }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: apps/web-admin/playwright-report/
          retention-days: 30

      - name: Upload test screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-screenshots
          path: apps/web-admin/test-results/
          retention-days: 7

      - name: Stop Supabase
        if: always()
        run: |
          cd supabase
          supabase stop

      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Try to read test results
            let message = '## E2E Test Results\n\n';

            try {
              const reportPath = path.join(process.env.GITHUB_WORKSPACE, 'apps/web-admin/playwright-report');
              const resultsPath = path.join(reportPath, 'results.json');

              if (fs.existsSync(resultsPath)) {
                const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
                message += `✅ Passed: ${results.passed}\n`;
                message += `❌ Failed: ${results.failed}\n`;
                message += `⏭️ Skipped: ${results.skipped}\n`;
              } else {
                message += 'Test results not available. Check the workflow logs for details.';
              }
            } catch (error) {
              message += `Error reading test results: ${error.message}`;
            }

            // Create or update PR comment
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;

            github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: message
            });
